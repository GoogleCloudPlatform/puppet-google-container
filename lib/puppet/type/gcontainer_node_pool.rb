# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/container/property/boolean'
require 'google/container/property/cluster_name'
require 'google/container/property/integer'
require 'google/container/property/keyvaluepairs'
require 'google/container/property/nodepool_autoscaling'
require 'google/container/property/nodepool_config'
require 'google/container/property/nodepool_management'
require 'google/container/property/nodepool_upgrade_options'
require 'google/container/property/string'
require 'google/container/property/string_array'
require 'google/container/property/time'
require 'puppet'

Puppet::Type.newtype(:gcontainer_node_pool) do
  @doc = <<-DOC
    NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of
    nodes (i.e. VM's), with a common configuration and specification, under the control of the
    cluster master. They may have a set of Kubernetes labels applied to them, which may be used to
    reference them during pod scheduling. They may also be resized up or down, to accommodate the
    workload.
  DOC

  autorequire(:gauth_credential) do
    credential = self[:credential]
    raise "#{ref}: required property 'credential' is missing" if credential.nil?
    [credential]
  end

  autorequire(:gcontainer_cluster) do
    reference = self[:cluster]
    raise "#{ref} required property 'cluster' is missing" if reference.nil?
    reference.autorequires
  end

  ensurable

  newparam :credential do
    desc <<-DESC
      A gauth_credential name to be used to authenticate with Google Cloud
      Platform.
    DESC
  end

  newparam(:project) do
    desc 'A Google Cloud Platform project to manage.'
  end

  newparam(:name, namevar: true) do
    # TODO(nelsona): Make this description to match the key of the object.
    desc 'The name of the NodePool.'
  end

  newparam(:cluster, parent: Google::Container::Property::ClusterNameRef) do
    desc 'The cluster this node pool belongs to.'
  end

  newparam(:zone, parent: Google::Container::Property::String) do
    desc 'The zone where the node pool is deployed'
  end

  newproperty(:name, parent: Google::Container::Property::String) do
    desc 'The name of the node pool.'
  end

  newproperty(:config, parent: Google::Container::Property::NodePoolConfig) do
    desc 'The node configuration of the pool.'
  end

  newproperty(:initial_node_count, parent: Google::Container::Property::Integer) do
    desc <<-DOC
      The initial node count for the pool. You must ensure that your Compute Engine resource quota
      is sufficient for this number of instances. You must also have available firewall and routes
      quota.
    DOC
  end

  newproperty(:version, parent: Google::Container::Property::String) do
    desc 'The version of the Kubernetes of this node. (output only)'
  end

  newproperty(:autoscaling, parent: Google::Container::Property::NodePoolAutoscaling) do
    desc <<-DOC
      Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid
      configuration is present.
    DOC
  end

  newproperty(:management, parent: Google::Container::Property::NodePoolManagement) do
    desc 'Management configuration for this NodePool.'
  end
end
