# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

describe Puppet::Type.type(:gcontainer_node_pool).provider(:google) do
  before(:all) do
    cred = Google::FakeAuthorization.new
    Puppet::Type.type(:gauth_credential)
                .define_singleton_method(:fetch) { |_resource| cred }
  end

  it '#instances' do
    expect { described_class.instances }.to raise_error(StandardError,
                                                        /not supported/)
  end

  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0', cluster: 'test name#0 data'
              expect_network_get_success 2, name: 'title1', cluster: 'test name#1 data'
              expect_network_get_success 3, name: 'title2', cluster: 'test name#2 data'
              expect_network_get_success_cluster 1
              expect_network_get_success_cluster 2
              expect_network_get_success_cluster 3
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gcontainer_cluster { 'resource(cluster,0)':
                  ensure             => present,
                  initial_node_count => 1911672831,
                  name               => 'test name#0 data',
                  zone               => 'test zone#0 data',
                  project            => 'test project#0 data',
                  credential         => 'cred0',
                }

                gcontainer_cluster { 'resource(cluster,1)':
                  ensure             => present,
                  initial_node_count => 3823345662,
                  name               => 'test name#1 data',
                  zone               => 'test zone#1 data',
                  project            => 'test project#1 data',
                  credential         => 'cred1',
                }

                gcontainer_cluster { 'resource(cluster,2)':
                  ensure             => present,
                  initial_node_count => 5735018494,
                  name               => 'test name#2 data',
                  zone               => 'test zone#2 data',
                  project            => 'test project#2 data',
                  credential         => 'cred2',
                }

                gcontainer_node_pool { 'title0':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => true,
                    max_node_count => 39920247,
                    min_node_count => 1663550365,
                  },
                  cluster            => 'resource(cluster,0)',
                  config             => {
                    disk_size_gb    => 450092159,
                    image_type      => 'test image_type#0 data',
                    labels          => {
                      'test labels#1 data' => 'test labels#1 data',
                      'test labels#2 data' => 6131251034,
                    },
                    local_ssd_count => 1751176017,
                    machine_type    => 'test machine_type#0 data',
                    metadata        => {
                      'test metadata#1 data' => 'test metadata#1 data',
                      'test metadata#2 data' => 2666715473,
                      'test metadata#3 data' => 'test metadata#3 data',
                    },
                    oauth_scopes    => ['ww', 'xx', 'yy', 'zz'],
                    preemptible     => true,
                    service_account => 'test service_account#0 data',
                    tags            => ['mm', 'nn', 'oo', 'pp'],
                  },
                  initial_node_count => 1911672831,
                  management         => {
                    auto_repair     => true,
                    auto_upgrade    => true,
                    upgrade_options => {
                      auto_upgrade_start_time => '2014-10-31T08:37:14+00:00',
                      description             => 'test description#0 data',
                    },
                  },
                  zone               => 'test zone#0 data',
                  project            => 'test project#0 data',
                  credential         => 'cred0',
                }

                gcontainer_node_pool { 'title1':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => false,
                    max_node_count => 79840495,
                    min_node_count => 3327100730,
                  },
                  cluster            => 'resource(cluster,1)',
                  config             => {
                    disk_size_gb    => 900184319,
                    image_type      => 'test image_type#1 data',
                    labels          => {
                      'test labels#2 data' => 'test labels#2 data',
                      'test labels#3 data' => 8175001379,
                      'test labels#4 data' => 'test labels#4 data',
                    },
                    local_ssd_count => 3502352035,
                    machine_type    => 'test machine_type#1 data',
                    metadata        => {
                      'test metadata#2 data' => 'test metadata#2 data',
                      'test metadata#3 data' => 3555620630,
                      'test metadata#4 data' => 'test metadata#4 data',
                      'test metadata#5 data' => 5333430946,
                      'test metadata#6 data' => 'test metadata#6 data',
                    },
                    oauth_scopes    => ['xx', 'yy', 'zz'],
                    preemptible     => false,
                    service_account => 'test service_account#1 data',
                    tags            => ['bb', 'cc', 'dd'],
                  },
                  initial_node_count => 3823345662,
                  management         => {
                    auto_repair     => false,
                    auto_upgrade    => false,
                    upgrade_options => {
                      auto_upgrade_start_time => '2059-08-30T17:14:29+00:00',
                      description             => 'test description#1 data',
                    },
                  },
                  zone               => 'test zone#1 data',
                  project            => 'test project#1 data',
                  credential         => 'cred1',
                }

                gcontainer_node_pool { 'title2':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => true,
                    max_node_count => 119760742,
                    min_node_count => 4990651095,
                  },
                  cluster            => 'resource(cluster,2)',
                  config             => {
                    disk_size_gb    => 1350276479,
                    image_type      => 'test image_type#2 data',
                    labels          => {
                      'test labels#3 data' => 'test labels#3 data',
                      'test labels#4 data' => 10218751724,
                      'test labels#5 data' => 'test labels#5 data',
                      'test labels#6 data' => 14306252413,
                    },
                    local_ssd_count => 5253528053,
                    machine_type    => 'test machine_type#2 data',
                    metadata        => {
                      'test metadata#3 data' => 'test metadata#3 data',
                      'test metadata#4 data' => 4444525788,
                      'test metadata#5 data' => 'test metadata#5 data',
                    },
                    oauth_scopes    => ['yy', 'zz'],
                    preemptible     => true,
                    service_account => 'test service_account#2 data',
                    tags            => ['qq', 'rr'],
                  },
                  initial_node_count => 5735018494,
                  management         => {
                    auto_repair     => true,
                    auto_upgrade    => true,
                    upgrade_options => {
                      auto_upgrade_start_time => '2104-06-30T01:51:43+00:00',
                      description             => 'test description#2 data',
                    },
                  },
                  zone               => 'test zone#2 data',
                  project            => 'test project#2 data',
                  credential         => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gcontainer_node_pool[title0]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title0]').provider
              end

              it { is_expected.to have_attributes(name: 'title0') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 1_911_672_831) }
              it { is_expected.to have_attributes(version: 'test version#0 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end

            context 'Gcontainer_node_pool[title1]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title1]').provider
              end

              it { is_expected.to have_attributes(name: 'title1') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 3_823_345_662) }
              it { is_expected.to have_attributes(version: 'test version#1 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end

            context 'Gcontainer_node_pool[title2]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title2]').provider
              end

              it { is_expected.to have_attributes(name: 'title2') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 5_735_018_494) }
              it { is_expected.to have_attributes(version: 'test version#2 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, cluster: 'test name#0 data'
              expect_network_get_success 2, cluster: 'test name#1 data'
              expect_network_get_success 3, cluster: 'test name#2 data'
              expect_network_get_success_cluster 1
              expect_network_get_success_cluster 2
              expect_network_get_success_cluster 3
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gcontainer_cluster { 'resource(cluster,0)':
                  ensure             => present,
                  initial_node_count => 1911672831,
                  name               => 'test name#0 data',
                  zone               => 'test zone#0 data',
                  project            => 'test project#0 data',
                  credential         => 'cred0',
                }

                gcontainer_cluster { 'resource(cluster,1)':
                  ensure             => present,
                  initial_node_count => 3823345662,
                  name               => 'test name#1 data',
                  zone               => 'test zone#1 data',
                  project            => 'test project#1 data',
                  credential         => 'cred1',
                }

                gcontainer_cluster { 'resource(cluster,2)':
                  ensure             => present,
                  initial_node_count => 5735018494,
                  name               => 'test name#2 data',
                  zone               => 'test zone#2 data',
                  project            => 'test project#2 data',
                  credential         => 'cred2',
                }

                gcontainer_node_pool { 'title0':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => true,
                    max_node_count => 39920247,
                    min_node_count => 1663550365,
                  },
                  cluster            => 'resource(cluster,0)',
                  config             => {
                    disk_size_gb    => 450092159,
                    image_type      => 'test image_type#0 data',
                    labels          => {
                      'test labels#1 data' => 'test labels#1 data',
                      'test labels#2 data' => 6131251034,
                    },
                    local_ssd_count => 1751176017,
                    machine_type    => 'test machine_type#0 data',
                    metadata        => {
                      'test metadata#1 data' => 'test metadata#1 data',
                      'test metadata#2 data' => 2666715473,
                      'test metadata#3 data' => 'test metadata#3 data',
                    },
                    oauth_scopes    => ['ww', 'xx', 'yy', 'zz'],
                    preemptible     => true,
                    service_account => 'test service_account#0 data',
                    tags            => ['mm', 'nn', 'oo', 'pp'],
                  },
                  initial_node_count => 1911672831,
                  management         => {
                    auto_repair     => true,
                    auto_upgrade    => true,
                    upgrade_options => {
                      auto_upgrade_start_time => '2014-10-31T08:37:14+00:00',
                      description             => 'test description#0 data',
                    },
                  },
                  name               => 'test name#0 data',
                  zone               => 'test zone#0 data',
                  project            => 'test project#0 data',
                  credential         => 'cred0',
                }

                gcontainer_node_pool { 'title1':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => false,
                    max_node_count => 79840495,
                    min_node_count => 3327100730,
                  },
                  cluster            => 'resource(cluster,1)',
                  config             => {
                    disk_size_gb    => 900184319,
                    image_type      => 'test image_type#1 data',
                    labels          => {
                      'test labels#2 data' => 'test labels#2 data',
                      'test labels#3 data' => 8175001379,
                      'test labels#4 data' => 'test labels#4 data',
                    },
                    local_ssd_count => 3502352035,
                    machine_type    => 'test machine_type#1 data',
                    metadata        => {
                      'test metadata#2 data' => 'test metadata#2 data',
                      'test metadata#3 data' => 3555620630,
                      'test metadata#4 data' => 'test metadata#4 data',
                      'test metadata#5 data' => 5333430946,
                      'test metadata#6 data' => 'test metadata#6 data',
                    },
                    oauth_scopes    => ['xx', 'yy', 'zz'],
                    preemptible     => false,
                    service_account => 'test service_account#1 data',
                    tags            => ['bb', 'cc', 'dd'],
                  },
                  initial_node_count => 3823345662,
                  management         => {
                    auto_repair     => false,
                    auto_upgrade    => false,
                    upgrade_options => {
                      auto_upgrade_start_time => '2059-08-30T17:14:29+00:00',
                      description             => 'test description#1 data',
                    },
                  },
                  name               => 'test name#1 data',
                  zone               => 'test zone#1 data',
                  project            => 'test project#1 data',
                  credential         => 'cred1',
                }

                gcontainer_node_pool { 'title2':
                  ensure             => present,
                  autoscaling        => {
                    enabled        => true,
                    max_node_count => 119760742,
                    min_node_count => 4990651095,
                  },
                  cluster            => 'resource(cluster,2)',
                  config             => {
                    disk_size_gb    => 1350276479,
                    image_type      => 'test image_type#2 data',
                    labels          => {
                      'test labels#3 data' => 'test labels#3 data',
                      'test labels#4 data' => 10218751724,
                      'test labels#5 data' => 'test labels#5 data',
                      'test labels#6 data' => 14306252413,
                    },
                    local_ssd_count => 5253528053,
                    machine_type    => 'test machine_type#2 data',
                    metadata        => {
                      'test metadata#3 data' => 'test metadata#3 data',
                      'test metadata#4 data' => 4444525788,
                      'test metadata#5 data' => 'test metadata#5 data',
                    },
                    oauth_scopes    => ['yy', 'zz'],
                    preemptible     => true,
                    service_account => 'test service_account#2 data',
                    tags            => ['qq', 'rr'],
                  },
                  initial_node_count => 5735018494,
                  management         => {
                    auto_repair     => true,
                    auto_upgrade    => true,
                    upgrade_options => {
                      auto_upgrade_start_time => '2104-06-30T01:51:43+00:00',
                      description             => 'test description#2 data',
                    },
                  },
                  name               => 'test name#2 data',
                  zone               => 'test zone#2 data',
                  project            => 'test project#2 data',
                  credential         => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gcontainer_node_pool[title0]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title0]').provider
              end

              it { is_expected.to have_attributes(name: 'test name#0 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 1_911_672_831) }
              it { is_expected.to have_attributes(version: 'test version#0 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end

            context 'Gcontainer_node_pool[title1]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title1]').provider
              end

              it { is_expected.to have_attributes(name: 'test name#1 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 3_823_345_662) }
              it { is_expected.to have_attributes(version: 'test version#1 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end

            context 'Gcontainer_node_pool[title2]' do
              subject do
                catalog.resource('Gcontainer_node_pool[title2]').provider
              end

              it { is_expected.to have_attributes(name: 'test name#2 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'config' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(initial_node_count: 5_735_018_494) }
              it { is_expected.to have_attributes(version: 'test version#2 data') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'autoscaling' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'management' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0', cluster: 'test name#0 data'
            expect_network_create \
              1,
              {
                'name' => 'title0',
                'config' => {
                  'machineType' => 'test machine_type#0 data',
                  'diskSizeGb' => 450_092_159,
                  'oauthScopes' => %w[ww xx yy zz],
                  'serviceAccount' => 'test service_account#0 data',
                  'metadata' => {
                    'test metadata#1 data' => 'test metadata#1 data',
                    'test metadata#2 data' => 2_666_715_473,
                    'test metadata#3 data' => 'test metadata#3 data'
                  },
                  'imageType' => 'test image_type#0 data',
                  'labels' => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6_131_251_034
                  },
                  'localSsdCount' => 1_751_176_017,
                  'tags' => %w[mm nn oo pp],
                  'preemptible' => true
                },
                'initialNodeCount' => 1_911_672_831,
                'autoscaling' => {
                  'enabled' => true,
                  'minNodeCount' => 1_663_550_365,
                  'maxNodeCount' => 39_920_247
                },
                'management' => {
                  'autoUpgrade' => true,
                  'autoRepair' => true,
                  'upgradeOptions' => {
                    'autoUpgradeStartTime' => '2014-10-31T08:37:14+00:00',
                    'description' => 'test description#0 data'
                  }
                }
              },
              name: 'title0',
              cluster: 'test name#0 data'
            expect_network_get_async 1, name: 'title0', cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => present,
                autoscaling        => {
                  enabled        => true,
                  max_node_count => 39920247,
                  min_node_count => 1663550365,
                },
                cluster            => 'resource(cluster,0)',
                config             => {
                  disk_size_gb    => 450092159,
                  image_type      => 'test image_type#0 data',
                  labels          => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  local_ssd_count => 1751176017,
                  machine_type    => 'test machine_type#0 data',
                  metadata        => {
                    'test metadata#1 data' => 'test metadata#1 data',
                    'test metadata#2 data' => 2666715473,
                    'test metadata#3 data' => 'test metadata#3 data',
                  },
                  oauth_scopes    => ['ww', 'xx', 'yy', 'zz'],
                  preemptible     => true,
                  service_account => 'test service_account#0 data',
                  tags            => ['mm', 'nn', 'oo', 'pp'],
                },
                initial_node_count => 1911672831,
                management         => {
                  auto_repair     => true,
                  auto_upgrade    => true,
                  upgrade_options => {
                    auto_upgrade_start_time => '2014-10-31T08:37:14+00:00',
                    description             => 'test description#0 data',
                  },
                },
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1, cluster: 'test name#0 data'
            expect_network_create \
              1,
              {
                'name' => 'test name#0 data',
                'config' => {
                  'machineType' => 'test machine_type#0 data',
                  'diskSizeGb' => 450_092_159,
                  'oauthScopes' => %w[ww xx yy zz],
                  'serviceAccount' => 'test service_account#0 data',
                  'metadata' => {
                    'test metadata#1 data' => 'test metadata#1 data',
                    'test metadata#2 data' => 2_666_715_473,
                    'test metadata#3 data' => 'test metadata#3 data'
                  },
                  'imageType' => 'test image_type#0 data',
                  'labels' => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6_131_251_034
                  },
                  'localSsdCount' => 1_751_176_017,
                  'tags' => %w[mm nn oo pp],
                  'preemptible' => true
                },
                'initialNodeCount' => 1_911_672_831,
                'autoscaling' => {
                  'enabled' => true,
                  'minNodeCount' => 1_663_550_365,
                  'maxNodeCount' => 39_920_247
                },
                'management' => {
                  'autoUpgrade' => true,
                  'autoRepair' => true,
                  'upgradeOptions' => {
                    'autoUpgradeStartTime' => '2014-10-31T08:37:14+00:00',
                    'description' => 'test description#0 data'
                  }
                }
              },
              cluster: 'test name#0 data'
            expect_network_get_async 1, cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => present,
                autoscaling        => {
                  enabled        => true,
                  max_node_count => 39920247,
                  min_node_count => 1663550365,
                },
                cluster            => 'resource(cluster,0)',
                config             => {
                  disk_size_gb    => 450092159,
                  image_type      => 'test image_type#0 data',
                  labels          => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  local_ssd_count => 1751176017,
                  machine_type    => 'test machine_type#0 data',
                  metadata        => {
                    'test metadata#1 data' => 'test metadata#1 data',
                    'test metadata#2 data' => 2666715473,
                    'test metadata#3 data' => 'test metadata#3 data',
                  },
                  oauth_scopes    => ['ww', 'xx', 'yy', 'zz'],
                  preemptible     => true,
                  service_account => 'test service_account#0 data',
                  tags            => ['mm', 'nn', 'oo', 'pp'],
                },
                initial_node_count => 1911672831,
                management         => {
                  auto_repair     => true,
                  auto_upgrade    => true,
                  upgrade_options => {
                    auto_upgrade_start_time => '2014-10-31T08:37:14+00:00',
                    description             => 'test description#0 data',
                  },
                },
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0', cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => absent,
                cluster            => 'resource(cluster,0)',
                initial_node_count => 1911672831,
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1, cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => absent,
                cluster            => 'resource(cluster,0)',
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_success 1, name: 'title0', cluster: 'test name#0 data'
            expect_network_delete 1, 'title0', cluster: 'test name#0 data'
            expect_network_get_async 1, name: 'title0', cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => absent,
                cluster            => 'resource(cluster,0)',
                initial_node_count => 1911672831,
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_success 1, cluster: 'test name#0 data'
            expect_network_delete 1, nil, cluster: 'test name#0 data'
            expect_network_get_async 1, cluster: 'test name#0 data'
            expect_network_get_success_cluster 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gcontainer_cluster { 'resource(cluster,0)':
                ensure             => present,
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }

              gcontainer_node_pool { 'title0':
                ensure             => absent,
                cluster            => 'resource(cluster,0)',
                initial_node_count => 1911672831,
                name               => 'test name#0 data',
                zone               => 'test zone#0 data',
                project            => 'test project#0 data',
                credential         => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gcontainer_node_pool[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context '#flush' do
    subject do
      Puppet::Type.type(:gcontainer_node_pool).new(
        ensure: :present,
        name: 'my-name'
      ).provider
    end
    context 'no-op' do
      it { subject.flush }
    end
    context 'modified object' do
      before do
        subject.dirty :some_property, 'current', 'newvalue'
      end
      context 'no-op if created' do
        before { subject.instance_variable_set(:@created, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
      context 'no-op if deleted' do
        before { subject.instance_variable_set(:@deleted, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
    end
  end

  private

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_async(id, data = {})
    body = {}.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET <async> #{args}"
      request
    end
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'container#operation',
             status: 'DONE', targetLink: self_link(merged_uri) }.to_json

    # Remove refs that are also part of the body
    expected_body = Hash[expected_body.map do |k, v|
      [k.is_a?(Symbol) ? k.id2name : k, v]
    end]

    # Encode the object to conform with the API
    expected_body = encode_request(expected_body)
    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Container::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'container#operation',
             status: 'DONE',
             targetLink: self_link(delete_data) }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Container::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcontainer_node_pool', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def expect_network_get_success_cluster(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result_cluster("success#{id}~" \
                                                           "#{id_data}.yaml")
           .to_json
    uri = uri_data_cluster(id).merge(data)

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{uri}"
    expect(Google::Container::Network::Get).to receive(:new)
      .with(self_link_cluster(uri),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def load_network_result_cluster(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gcontainer_cluster', file)
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  # Creates variable test data to comply with self_link URI parameters
  # Only used for gcontainer_cluster objects
  def uri_data_cluster(id)
    {
      project: GoogleTests::Constants::C_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::C_PROJECT_DATA.size],
      zone: GoogleTests::Constants::C_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::C_ZONE_DATA.size],
      name: GoogleTests::Constants::C_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::C_NAME_DATA.size]
    }
  end

  def self_link_cluster(data)
    URI.join(
      'https://container.googleapis.com/v1/',
      expand_variables_cluster(
        'projects/{{project}}/zones/{{zone}}/clusters/{{name}}',
        data
      )
    )
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def expand_variables_cluster(template, data, ext_dat = {})
    Puppet::Type.type(:gcontainer_cluster).provider(:google)
                .expand_variables(template, data, ext_dat)
  end

  def create_type(id)
    Puppet::Type.type(:gcontainer_node_pool).new(
      ensure: :present,
      title: "title#{id - 1}",
      credential: "cred#{id - 1}",
      project: GoogleTests::Constants::NP_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::NP_PROJECT_DATA.size],
      zone: GoogleTests::Constants::NP_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::NP_ZONE_DATA.size],
      cluster: GoogleTests::Constants::NP_CLUSTER_DATA[(id - 1) \
        % GoogleTests::Constants::NP_CLUSTER_DATA.size],
      name: GoogleTests::Constants::NP_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::NP_NAME_DATA.size]
    )
  end

  def expand_variables(template, data, extra_data = {})
    Puppet::Type.type(:gcontainer_node_pool).provider(:google)
                .expand_variables(template, data, extra_data)
  end

  def encode_request(resource)
    Puppet::Type.type(:gcontainer_node_pool).provider(:google)
                .encode_request(resource)
  end

  def collection(data)
    URI.join(
      'https://container.googleapis.com/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/clusters/{{cluster}}/nodePools',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://container.googleapis.com/v1/',
      expand_variables(
        'projects/{{project}}/zones/{{zone}}/clusters/{{cluster}}/nodePools/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::NP_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::NP_PROJECT_DATA.size],
      zone: GoogleTests::Constants::NP_ZONE_DATA[(id - 1) \
        % GoogleTests::Constants::NP_ZONE_DATA.size],
      cluster: GoogleTests::Constants::NP_CLUSTER_DATA[(id - 1) \
        % GoogleTests::Constants::NP_CLUSTER_DATA.size],
      name: GoogleTests::Constants::NP_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::NP_NAME_DATA.size]
    }
  end
end
